import re

from playwright.async_api import async_playwright
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from models.positions import Positions 


clans = {
    'loner': {
        'emoji': 'üè†',
        'title': '–û–¥–∏–Ω–æ—á–∫–∏'
    },
    'domestic': {
        'emoji': 'üí§',
        'title': '–î–æ–º–∞—à–Ω–∏–µ'
    },
    'thunder': {
        'emoji': '‚ö°',
        'title': '–ì—Ä–æ–∑–∞'
    },
    'wind': {
        'emoji': 'üí®',
        'title': '–í–µ—Ç–µ—Ä'
    },
    'river': {
        'emoji': 'üåä',
        'title': '–†–µ–∫–∞'
    },
    'shadow': {
        'emoji': 'üîÆ',
        'title': '–¢–µ–Ω–∏'
    },
    'kpv': {
        'emoji': 'üóª',
        'title': '–ö–ª–∞–Ω –ø–∞–¥–∞—é—â–µ–π –≤–æ–¥—ã'
    },
    'nordgeist': {
        'emoji': '‚ùÑÔ∏è',
        'title': '–°–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞–Ω'
    },
}

positions = {
    'carriers': {
        'emoji': 'üçØ',
        'title': '–ú–µ–¥–æ–Ω–æ—Å–µ—Ü'
    },
    'defenders': {
        'emoji': '‚öîÔ∏è',
        'title': '–ó–∞—â–∏—Ç–Ω–∏–∫'
    },
    'creators': {
        'emoji': 'üé®',
        'title': '–¢–≤–æ—Ä–µ—Ü'
    },
    'squads': {
        'emoji': 'üçÅ',
        'title': '–í –æ—Ç—Ä—è–¥–∞—Ö (–û–í–ü)'
    },
}

def clean_text(text):
    return re.sub('[^0-9–∞-—è–ê-–Ø ()]', '', text).lower().strip()

def ask_id():
    message = '''
–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –Ø —Ç–æ-—Ç–æ —Ç–æ-—Ç–æ, —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ-—Ç–æ —Ç–æ-—Ç–æ.
–ü–æ–¥—Å–∫–∞–∂–∏ –∞–π–¥–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    '''
    return message

def ask_clan(): 
    message = '–í –∫–∞–∫–æ–º –ø–ª–µ–º–µ–Ω–∏ –æ–±–∏—Ç–∞–µ—à—å?'
    keyboard = VkKeyboard(one_time=True)

    keyboard.add_button(' '.join([clans['loner']['emoji'], clans['loner']['title']]), color=VkKeyboardColor.POSITIVE)
    keyboard.add_button(' '.join([clans['domestic']['emoji'], clans['domestic']['title']]), color=VkKeyboardColor.PRIMARY)

    for clan in [None, 'thunder', 'wind', 'river', 'shadow', None, 'kpv', 'nordgeist']:
        if clan is None: 
            keyboard.add_line() 
        else:
            keyboard.add_button(' '.join([clans[clan]['emoji'], clans[clan]['title']]), color=VkKeyboardColor.SECONDARY)
    
    return message, keyboard

def ask_position(users_positions): 
    message = '–ö–∞–∫–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å?'
    keyboard = VkKeyboard(one_time=True)  
    for pos in ['carriers', 'defenders', 'creators']:
        keyboard.add_button(
            ' '.join([positions[pos]['emoji'], positions[pos]['title']]),
            color=VkKeyboardColor.PRIMARY 
                  if positions[pos]['title'] in users_positions 
                  else VkKeyboardColor.SECONDARY
        )
    
    keyboard.add_line() 
    keyboard.add_button(
        ' '.join([positions['squads']['emoji'], positions['squads']['title']]),
        color=VkKeyboardColor.PRIMARY 
              if positions['squads']['title'] in users_positions 
              else VkKeyboardColor.SECONDARY
    )

    return message, keyboard

async def get_name(id):
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()
        await page.goto(f'http://catwar.net/cat{id}')
        await page.wait_for_selector('body')

        name = None
        element = await page.query_selector('big')
        if element:
            name = await element.text_content()

        await browser.close()
        return name

async def get_universe(id):
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()
        await page.goto(f'http://catwar.net/cat{id}')
        await page.wait_for_selector('body')

        universe = None
        element = await page.query_selector('[data-cat] > b')
        if element:
            universe = await element.text_content()

        await browser.close()
        return universe

async def command(vk, event, user):
    message = ''
    keyboard = None
    updates = {}
    skip = False
    text = clean_text(event.message)

    if user.stage == 0:
        message = ask_id()
        updates['stage'] = user.stage + 1
        skip = True
        
    if user.stage == 1:
        skip_prev = skip
        skip = False

        id = re.sub('[^0-9]', '', text)
        if await get_name(id) is not None:
            updates['stage'] = user.stage + 1
            updates['catwar_id'] = id
            skip = True
        elif skip_prev: 
            message = ask_id()
        else:
            message = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏! –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.'

    if user.stage == 2 or (user.stage == 1 and skip):
        skip_prev = skip
        skip = False

        id = user.catwar_id
        if id is None:
            id = re.sub('[^0-9]', '', text)
        if await get_universe(id) != '–û–∑—ë—Ä–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è':
            skip = True
            updates['stage'] = user.stage + 1
        elif text in map(lambda x: x['title'].lower(), clans.values()):
            skip = True
            updates['stage'] = user.stage + 1
            updates['loner'] = text == '–æ–¥–∏–Ω–æ—á–∫–∏'
        elif skip_prev:
            message, keyboard = ask_clan()
        else:
            message, keyboard = ask_clan()
            message = '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –ø–ª–µ–º—è, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'

    if user.stage == 3 or ((user.stage == 1 or user.stage == 2) and skip):
        skip_prev = skip
        skip = False

        if text == '–¥–∞–ª—å—à–µ':
            user_positions = Positions.find_all(user.id)
            if len(user_positions) > 0:
                skip = True
                updates['stage'] = user.stage + 1
            else:
                _, keyboard = ask_position(list(map(lambda x: x.title, user_positions)))
                message = '–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å!' 
        else:
            picked = [pos['title'] for pos in positions.values() if pos['title'].lower() == text]
            user_positions = Positions.find_all(user.id)

            if len(picked) > 0 and picked[0] in map(lambda pos: pos.title, user_positions):
                [Positions.remove(pos.id) for pos in user_positions if pos.title == picked[0]]
                message = f'–î–æ–ª–∂–Ω–æ—Å—Ç—å "{picked[0]}" —É–±—Ä–∞–Ω–∞!'
            elif len(picked) > 0:
                Positions.add({ 'user': user, 'title': picked[0] })
                message = f'–î–æ–ª–∂–Ω–æ—Å—Ç—å "{picked[0]}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!'
            elif not skip_prev:
                message = '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'

            user_positions = Positions.find_all(user.id)
            new_message, keyboard = ask_position(list(map(lambda x: x.title, user_positions)))

            if message == '':
                message = new_message

            if len(user_positions) > 0:
                keyboard.add_line() 
                keyboard.add_button('–î–∞–ª—å—à–µ', color=VkKeyboardColor.POSITIVE)


    if user.stage == 4 or (user.stage == 3 and skip):
        message = f'''
–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {await get_name(user.catwar_id)}!
–°—Ç–∞—Ç—É—Å: {'–æ–¥–∏–Ω–æ—á–∫–∞' if user.loner else '–ø–ª–µ–º–µ–Ω–Ω–æ–π'}
–î–æ–ª–∂–Ω–æ—Å—Ç–∏: {', '.join(sorted(map(lambda x: x.title, Positions.find_all(user.id))))}
'''

    if keyboard is None:
        vk.messages.send(user_id=event.user_id, message=message, random_id=0)
    else:
        vk.messages.send(user_id=event.user_id, message=message, random_id=0, keyboard=keyboard.get_keyboard())

    return updates
